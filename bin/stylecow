#!/usr/bin/env node

var program = require('commander');
var inquirer = require('inquirer');
var stylecow = require('../lib');
var fs = require('fs');
var path = require('path');

var configFile = process.env.USERPROFILE + '/.stylecow_config.json';

program.version(require('../package.json').version);


program
	.command('convert <input> [<output>]')
	.description('converts the css code from a file or directory')
	.option('-m, --manifest <file>', 'uses a specific manifest file instead the default one')
	.option('-w, --watch', 'watches the changes in the css files')
	.option('-c, --cwd <dir>', 'changes the current working directory', process.cwd())
	.action(convert)
	.on('--help', function () {
		console.log('  Example:');
		console.log('');
		console.log('  $ stylecow convert input.css output.css --manifest my-config.json');
		console.log('');
	});


program
	.command('plugins')
	.description('manages the installed plugins')
	.option('-l, --installed', 'list all installed plugins')
	.option('-i, --install <plugin>', 'installs new plugins', function (value) { return value.split(','); })
	.option('-u, --uninstall <plugin>', 'uninstalls plugins', function (value) { return value.split(','); })
	.option('-c, --uninstall-all', 'uninstalls all plugins')
	.option('-t, --test <plugin>', 'test a plugin')
	.option('-a, --all', 'search for all available plugins in npm')
	.action(plugins);


program
	.command('manifest')
	.description('manages manifest files with specific configuration to reuse them')
	.option('-d, --default', 'shows the default manifest file')
	.option('-e, --edit-default', 'edit the default manifest file')
	.option('-c, --create <file>', 'creates a new manifest file')
	.option('-m, --edit <file>', 'edit a custom manifest file')
	.action(manifest);


function convert (input, output, command) {
	var config;

	if (command.manifest) {
		var manifest = path.resolve(command.cwd, command.manifest);

		config = getConfig(manifest);

		if (!config) {
			console.log('');
			console.log('  error: Manifest file `' + manifest + '` not found');
			console.log('');
			return;
		}
	} else {
		config = getConfig();
	}

	input = path.resolve(command.cwd, input);

	if (output) {
		output = path.resolve(command.cwd, output);
	}

	preparePlugins(config.plugins, function (loadedPlugins) {
		if (!fs.existsSync(input)) {
			console.log('');
			console.log('  error: Input file `' + manifest + '` not found');
			console.log('');
			return;
		}

		if (fs.lstatSync(input).isFile()) {
			return execute(input, output, loadedPlugins, config.support, config.code, command.watch);
		}

		if (fs.lstatSync(input).isDirectory()) {
			var glob = require('glob');

			return glob('**/*.css', {
					cwd: path.resolve(input)
				}, function (er, files) {
					files.forEach(function (file) {
						var finput = path.join(input, file);
						var foutput = output ? path.join(output, file) : null;

						execute(finput, foutput, loadedPlugins, config.support, config.code, command.watch);
					});
			});
		}
	});
}


function execute (input, output, plugins, minSupport, codeStyle, watch) {
	var code = stylecow.readFile(input);
	code.executePlugins(plugins, minSupport);

	if (output) {
		var dir = path.dirname(output);

		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir);
		}

		fs.writeFileSync(output, code.toCode(codeStyle));

		console.log('');
		console.log('  success: Generated "' + output + '"');
		console.log('');
	} else {
		console.log('');
		console.log(code.toCode(codeStyle));
		console.log('');
	}

	if (watch) {
		console.log('');
		console.log('  Waiting for changes...');
		console.log('');
		
		var files = {};

		code
			.search()
			.filter(function (child) {
				return (child._data && child._data['sourceFile']);
			})
			.map(function (child) {
				return child._data['sourceFile'];
			})
			.forEach(function (file) {
				files[file] = null;
			});

		files = Object.getOwnPropertyNames(files);

		files.forEach(function (file) {
			fs.watchFile(file, {persistent: true, interval: 2000}, function (curr, prev) {
				if (curr.mtime !== prev.mtime) {
					console.log('');
					console.log('  changed detected: ' + file);
					console.log('');
					
					files.forEach(function (f) {
						fs.unwatchFile(f);
					});

					execute(input, output, plugins, minSupport, codeStyle, watch);
				}
			});
		});
	}
}


function plugins (command) {
	showHelpOnEmpty('plugins', command);

	if (command.installed) {
		var plugins = stylecow.getInstalledPlugins();

		if (plugins.length) {
			console.log('');
			plugins.forEach(function (plugin) {
				console.log('  - ' + plugin);
			});
			console.log('');
		} else {
			console.log('');
			console.log('  No installed plugins');
			console.log('');
		}

		return;
	}

	if (command.install) {
		stylecow.managePlugins('install', command.install, function () {
			console.log('');
			console.log('  success: Plugins installed successfully!!');
			console.log('');
		});
	}

	if (command.uninstall) {
		stylecow.managePlugins('uninstall', command.uninstall, function () {
			console.log('');
			console.log('  success: Plugins uninstalled successfully!!');
			console.log('');
		});
	}

	if (command.uninstallAll) {
		var plugins = stylecow.getInstalledPlugins();

		if (!plugins.length) {
			console.log('');
			console.log('  No installed plugins');
			console.log('');
			return;
		}

		stylecow.managePlugins('uninstall', plugins, function () {
			console.log('');
			console.log('  success: All plugins removed successfully!!');
			console.log('');
		});
	}

	if (command.all) {
		allPlugins(function (data) {
			for (i in data) {
				plugin = data[i];
				console.log('')
				console.log('  ' + stylecow.getPluginName(plugin.name));
				console.log('  ' + plugin.description);
				console.log('')
			}
		});
	}

	if (command.test) {
		var dir = path.resolve(command.test);

		if (!fs.existsSync(dir + '/package.json')) {
			console.log('');
			console.log('  error: `package.json` not found');
			console.log('');
			return;
		}

		if (!fs.existsSync(dir + '/tests')) {
			console.log('');
			console.log('  error: `tests` directory not found');
			console.log('');
			return;
		}

		var plugin = stylecow.preparePlugin(require(path.resolve(command.test, require(dir + '/package.json', 'utf8').main)));
		var glob = require('glob');

		glob('tests/{1..9}.css', {
			cwd: dir
		}, function (er, files) {
			files.forEach(function (file) {
				var expected = file.replace('.css', '.expected.css');

				if (!fs.existsSync(dir + '/' + expected)) {
					console.log('');
					console.log('  error: file `' + expected + '` not found');
					console.log('');
					return;
				}

				var manifest = file.replace('.css', '.json');

				if (fs.existsSync(dir + '/' + manifest)) {
					manifest = getConfig(dir + '/' + manifest);

					var support = manifest.support || {};

					if (manifest.plugins) {
						preparePlugins(manifest.plugins, function (plugins) {
							plugins.push(plugin);

							testPlugins(dir + '/' + file, dir + '/' + expected, plugins, support);
						});
					}
				} else {
					testPlugins(dir + '/' + file, dir + '/' + expected, [plugin], {});
				}
			});
		});
	}
}


function manifest (command) {
	showHelpOnEmpty('manifest', command);

	if (command['default']) {
		showConfig(getConfig());

		return;
	}

	if (command.editDefault) {
		modifyManifest(getConfig(), function (config) {
			saveConfig(config);

			console.log('');
			console.log('  success: Default manifest saved: `' + configFile + '`');
			console.log('');
		});

		return;
	}

	if (command.create) {
		modifyManifest(getConfig(), function (config) {
			saveConfig(config, command.create);

			console.log('');
			console.log('  success: Manifest file created: `' + command.create + '`');
			console.log('');
		});

		return;
	}

	if (command.edit) {
		modifyManifest(getConfig(command.edit), function (config) {
			saveConfig(config, command.edit);

			console.log('');
			console.log('  success: Manifest file saved: `' + command.create + '`');
			console.log('');
		});

		return;
	}
}

program.command('*').action(function (command) {
	console.log('');
	console.log('  error: unknown command `' + command + '`');
	console.log('');
	console.log('  type stylecow -h for help');
	console.log('');
});



// Misc

function showHelpOnEmpty (name, command) {
	var l = program.rawArgs.length - 1;

	if (program.rawArgs[l] === name) {
		command.help();
	}
}

function showConfig (config) {
	console.log('');
	console.log('  BROWSER SUPPORT:');

	for (var browser in config.support) {
		console.log('  - ' + browser + ': ', config.support[browser]);
	}

	console.log('');
	console.log('  PLUGINS:');

	if (config.plugins.length) {
		config.plugins.forEach(function (plugin) {
			console.log('  - ' + plugin);
		});
	} else {
		console.log('    No plugins applied by default');
	}

	console.log('');
	console.log('  CODE:');

	for (var k in config.code) {
		console.log('  - ' + k + ': ', '"' + config.code[k].replace('\n', '\\n').replace('\t', '\\t') + '"');
	}
}

function preparePlugins (plugins, callback) {
	var installed = stylecow.getInstalledPlugins();
	var notInstalled = plugins.filter(function (plugin) {
		return installed.indexOf(plugin) === -1;
	});

	if (notInstalled.length) {
		console.log('');
		console.log('  Installing the following required plugins:');
		console.log('');
		console.log(notInstalled.join(', '));
		console.log('');

		stylecow.managePlugins('install', notInstalled, function () {
			console.log('');
			console.log('  Plugins installed!');
			console.log('');

			callback(stylecow.preparePlugins(plugins));
		});
	} else {
		callback(stylecow.preparePlugins(plugins));
	}
}


function modifyManifest (config, callback) {
	allPlugins(function (allPlugins) {

		var questions = [
			{
				type: "input",
				name: "explorer",
				message: "Min version supported in Internet Explorer",
				default: config.support.explorer
			},
			{
				type: "input",
				name: "firefox",
				message: "Min version supported in Mozilla Firefox",
				default: config.support.firefox
			},
			{
				type: "input",
				name: "chrome",
				message: "Min version supported in Google Chrome",
				default: config.support.chrome
			},
			{
				type: "input",
				name: "safari",
				message: "Min version supported in Safari",
				default: config.support.safari
			},
			{
				type: "input",
				name: "opera",
				message: "Min version supported in Opera",
				default: config.support.opera
			},
			{
				type: "input",
				name: "android",
				message: "Min version supported in Android",
				default: config.support.android
			},
			{
				type: "input",
				name: "ios",
				message: "Min version supported in Safari for iOS",
				default: config.support.ios
			},
			{
				type: "list",
				name: "code",
				message: "Code style used to generate the css",
				choices: ['default', 'normal', 'minify'],
				default: 'default'
			},
			{
				type: "checkbox",
				name: "plugins",
				message: "Plugins used to transform de css",
				choices: allPlugins.map(function (plugin) {
					return {
						key: plugin.name,
						name: plugin.name,
						value: plugin.name,
						checked: (config.plugins.indexOf(plugin.name) !== -1)
					};
				})
			}
		];

		inquirer.prompt(questions, function (answers) {
			var manifest = {};

			if (answers.input) {
				manifest.input = answers.input;
			}

			if (answers.output) {
				manifest.output = answers.output;
			}

			manifest.support = {};

			['explorer','firefox','chrome','safari','opera','android','ios'].forEach(function (browser) {
				manifest.support[browser] = (answers[browser] === 'false') ? false : parseFloat(answers[browser], 10);
			});

			if (answers.code === 'default') {
				manifest.code = config.code;
			} else {
				manifest.code = stylecow.getCodeStyle(answers.code);
			}

			manifest.plugins = answers.plugins;

			console.log(JSON.stringify(manifest, null, '\t'));

			inquirer.prompt([
				{
					type: "confirm",
					name: "ok",
					message: "Looks fine?"
				}
			], function (answers) {
				if (answers.ok) {
					callback(manifest);
				}
			});

		});

	});
}


function allPlugins (callback) {
	var cache = path.dirname(__dirname) + '/all-plugins.json';

	if (fs.existsSync(cache)) {
		var stat = fs.lstatSync(cache);
		var diff = (new Date()).getTime() - stat.mtime.getTime();

		if (diff < 3600000) { //1 hour
			return callback(require(cache));
		}
	}

	console.log('');
	console.log('  Loading all available plugins...');
	console.log('');

	stylecow.getAllPlugins(function (all) {
		fs.writeFileSync(cache, JSON.stringify(all, null, '\t'));
		callback(all);
	});
}

function testPlugins (testFile, expectedFile, plugins, support) {
	var code = fs.readFileSync(testFile, 'utf8');
	var css = stylecow.create(code);
	var expected = fs.readFileSync(expectedFile, 'utf8');

	css.executePlugins(plugins, support);

	var string = css.toString();
	var assert = require('assert');

	try {
		assert.strictEqual(string.replace(/\r/g, '').trim(), expected.replace(/\r/g, '').trim());
		console.log('');
		console.log('  Test passed successfully: `' + testFile + '`');
		console.log('');
	} catch (exception) {
		console.log('');
		console.log('ORIGINAL CODE: `' + testFile + '`');
		console.log('------------------------------');
		console.log('');
		console.log(code);
		console.log('');
		console.log('MUST BECOME TO: `' + expectedFile + '`');
		console.log('------------------------------');
		console.log('');
		console.log(expected);
		console.log('');
		console.log('BUT IT IS:');
		console.log('------------------------------');
		console.log('');
		console.log(string);
		console.log('');
	}
}

function getConfig (file) {
	var f = file || configFile;

	if (fs.existsSync(f)) {
		return require(f);
	}

	if (!file) {
		return stylecow.getDefaults();
	}
}

function saveConfig (value, file) {
	fs.writeFileSync(file || configFile, JSON.stringify(value, null, '\t'));
}

program.parse(process.argv);

if (program.args.length === 0) {
	program.help();
}
