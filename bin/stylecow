#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var path = require('path');
var stylecow = require('../lib/index');

program
	.version(require('../package.json').version)
	.usage('[options]')
	.option('-c, --config', 'use a specific config file instead ./stylecow.json')
	.option('-w, --watch', 'watches the changes in the input css files')
	.option('-r, --live-reload', 'Live reload the browser on change the css');


// init command
program
	.command('init')
	.description('Creates a new configuration file')
	.action(function config (command) {
		var config = {
			support: stylecow.support,
			file: 'stylecow.json'
		};

		modifyConfig(config, function (config, file) {
			writeConfig(config, file);
		});
	});


// run
program.parse(process.argv);

if (!program.args.length) {
	run(program.config, program.watch, program.liveReload);
}



/* =================================================== */

function run (configFile, watch, liveReload) {
	//Load config
	configFile = path.resolve(process.cwd(), configFile || './stylecow.json');

	var config = readConfig(configFile),
		basePath = path.dirname(configFile),
		socket;

	if (!config.files) {
		console.log('');
		console.log('  error: No files defined');
		console.log('');
		return;
	}

	config.liveReload = liveReload;

	if (config.liveReload) {
		config.watch = true;
	} else {
		config.watch = watch;
	}

	config.watchingFiles = {};

	//Configure stylecow
	stylecow.cwd(basePath);

	if (config.support) {
		stylecow.minSupport(config.support);
	}

	if (config.plugins) {
		config.plugins.forEach(function (plugin) {
			stylecow.loadPlugin(plugin);
		});
	}

	if (config.modules) {
		config.modules.forEach(function (module) {
			stylecow.loadNpmModule(module);
		});
	}

	//Init websocket for live reload
	if (config.liveReload) {
		//Open the websocket server
		var WebSocketServer = require('ws').Server,
			wss = new WebSocketServer({port: 8080});

		wss.on('connection', function (ws) {
			config.socket = ws;

			ws.on('message', function (data) {
				var data = JSON.parse(data);

				if (data.subject === 'connection') {
					console.log('');
					console.log('connected to browser');
					console.log(data.agent);

					config.files.forEach(function (file) {
						data.files.forEach(function (f) {
							if (f.baseUrl && file.output === f.output) {
								console.log('syncing: ' + f.baseUrl);
								file.baseUrl = f.baseUrl;
							}
						});
					});
				}
			});

			//Get the baseurl for each file
			ws.send(JSON.stringify({
				subject: 'connection',
				files: config.files
			}), {
				mask: true
			});
		});

		//Create a webserver to serve the js code
		var http = require('http');
		var script = fs.readFileSync(__dirname + '/ws-script.js', {encoding: 'utf-8'});

		http.createServer(function (req, res) {
			res.writeHead(200, {'Content-Type': 'text/javascript'});
			res.end(script);
		}).listen(8081, '127.0.0.1');

		console.log('WebSocket server running at ws://127.0.0.1:8080');
		console.log('Web server running at http://127.0.0.1:8081');

		console.log('Put this code in the html page:');
		console.log('');
		console.log('<script type="text/javascript" src="//127.0.0.1:8081"></script>');
		console.log('');
	}

	//Init watcher
	if (config.watch) {
		config.watch = require('chokidar').watch([], {
			persistent: true,
			cwd: stylecow.cwd()
		});

		console.log('Waiting for changes...');
		console.log('');

		config.watch.on('change', function (filepath) {
			var files = config.watchingFiles[filepath];

			if (!files) {
				return;
			}

			console.log('');
			console.log('change detected: ' + filepath);

			files.forEach(function (file) {
				executeConvert(config, file);

				//Add new files to watching index
				file.files.forEach(function (f) {
					if (config.watchingFiles[f]) {
						if (config.watchingFiles[f].indexOf(file) === -1) {
							config.watchingFiles[f].push(file);
						}
					} else {
						config.watchingFiles[f] = [file];
						config.watch.add(f);
						console.log('watch: ' + f);
					}
				});

				//Remove old files from watching index
				for (var f in config.watchingFiles) {
					var index = config.watchingFiles[f].indexOf(file);

					if (index !== -1) {
						if (file.files.indexOf(f) === -1) {
							config.watchingFiles[f].splice(index, 1);

							if (!config.watchingFiles[f].length) {
								delete config.watchingFiles[f];
								config.watch.unwatch(f);
								console.log('unwatch: ' + f);
							}
						}
					}
				}
			});
		});
	}

	//Convert the code
	config.files.forEach(function (file) {
		if (file.map === 'false') {
			file.map = false;
		}

		executeConvert(config, file);

		//Watch changes
		if (config.watch) {
			file.files.forEach(function (f) {
				if (!config.watchingFiles[f]) {
					config.watchingFiles[f] = [file];
					config.watch.add(f);
				} else {
					config.watchingFiles[f].push(file);
				}
			});
		}
	});
}

//Converts the code and output the result
function executeConvert (config, file) {
	var css = stylecow.Root.create(stylecow.Reader.fromFile(file.input));

	//Convert the code
	stylecow.run(css);

	var code = new stylecow.Coder(css, {
		sourceMap: file.map,
		file: file.output,
		style: config.code
	});

	if (file.output) {
		code.save();
		console.log('success: Generated "' + file.output + '"');
	} else {
		console.log('');
		console.log(code.code);
		console.log('');
	}

	//Send the code to socket
	if (config.socket && file.baseUrl) {
		var url = require('url');
		var basepath = path.dirname(file.baseUrl);

		css.search({
			type: 'Function',
			name: 'url'
		}).search({
			type: ['Keyword', 'String']
		}).forEach(function (keyword) {
			if (!url.parse(keyword.name).hostname && (keyword.name[0] !== '/')) {
				keyword.name = basepath + '/' + keyword.name;
			}
		});

		code = new stylecow.Coder(css, {
			//sourceMap: 'embed',
			style: 'minify'
		});

		config.socket.send(JSON.stringify({
			subject: 'code',
			code: code.code,
			baseUrl: file.baseUrl
		}), {
			mask: true
		}, function () {
			console.log('success: Code sent to socket');
		});
	}

	//Get secondary files
	file.files = getFiles(css);
}

function modifyConfig (config, callback) {
	var inquirer = require('inquirer');
	var files = config.files ? (config.files[0] || {}) : {};
	var availablePlugins = fs.readdirSync(__dirname + '/../node_modules')
		.filter(function (value) {
			return value.slice(0, 16) === 'stylecow-plugin-';
		}).map(function (value) {
			return value.slice(16);
		});

	var questions = [
		{
			type: "input",
			name: "explorer",
			message: "Min version supported in Internet Explorer",
			default: config.support.explorer
		},
		{
			type: "input",
			name: "firefox",
			message: "Min version supported in Mozilla Firefox",
			default: config.support.firefox
		},
		{
			type: "input",
			name: "chrome",
			message: "Min version supported in Google Chrome",
			default: config.support.chrome
		},
		{
			type: "input",
			name: "safari",
			message: "Min version supported in Safari",
			default: config.support.safari
		},
		{
			type: "input",
			name: "opera",
			message: "Min version supported in Opera",
			default: config.support.opera
		},
		{
			type: "input",
			name: "android",
			message: "Min version supported in Android",
			default: config.support.android
		},
		{
			type: "input",
			name: "ios",
			message: "Min version supported in Safari for iOS",
			default: config.support.ios
		},
		{
			type: "checkbox",
			name: "plugins",
			message: "Plugins to apply",
			choices: availablePlugins,
			default: config.plugins || availablePlugins
		},
		{
			type: "list",
			name: "code",
			message: "Code style used to generate the css",
			choices: Object.keys(stylecow.Coder.styles),
			default: config.code
		},
		{
			type: "input",
			name: "input",
			message: "Input css filename",
			default: files.input
		},
		{
			type: "input",
			name: "output",
			message: "Output css filename",
			default: files.output
		},
		{
			type: "list",
			name: "map",
			message: "Generate the css source map?",
			choices: function (answers) {
				var file = answers.output.replace('.css', '.map');

				return [
					{
						name: 'Yes, save in ' + file,
						value: file,
						default: true
					},{
						name: 'Yes, embed the map in the css file',
						value: 'embed'
					},{
						name: 'No',
						value: false
					}
				];
			}
		}
	];

	inquirer.prompt(questions, function (answers) {
		var newConfig = {
			files: [
				{
					input: answers.input,
					output: answers.output,
					map: answers.map
				}
			]
		};

		newConfig.support = {};

		['explorer','firefox','chrome','safari','opera','android','ios'].forEach(function (browser) {
			newConfig.support[browser] = (answers[browser] === 'false') ? false : parseFloat(answers[browser], 10);
		});

		newConfig.plugins = answers.plugins;
		newConfig.code = answers.code;

		console.log(JSON.stringify(newConfig, null, '\t'));

		inquirer.prompt([
			{
				type: "confirm",
				name: "ok",
				message: "Looks fine?"
			}
		], function (answers) {
			if (answers.ok) {
				inquirer.prompt([
					{
						type: "input",
						name: "file",
						message: "Filename where to save the configuration",
						validate: function (e) {
							if (!e) {
								return 'You must specify a filename to the config file (for example: myconfig.json)';
							}

							if (path.extname(e) !== '.json') {
								return 'The config file must end in ".json"';
							}

							return true;
						},
						default: config.file
					}
				], function (answers) {
					callback(newConfig, answers.file);
				});
			}
		});
	});
}

function getFiles (css) {
	var files = {};
	var nodes = css.getAll();
	nodes.push(css);

	nodes.filter(function (child) {
			return (child._data && child._data['sourceFile']);
		})
		.map(function (child) {
			return child._data['sourceFile'];
		})
		.forEach(function (file) {
			files[path.normalize(file)] = null;
		});

	return Object.getOwnPropertyNames(files);
}

function readConfig (file) {
	if (fs.existsSync(file)) {
		return require(file);
	}

	console.log('');
	console.log('  error: Config file `' + file + '` not found');
	console.log('');

	process.exit();
}

function writeConfig (value, file) {
	fs.writeFileSync(file, JSON.stringify(value, null, '\t'));

	console.log('success: Config file saved: `' + file + '`');
	console.log('');
}
