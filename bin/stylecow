#!/usr/bin/env node

var program = require('commander');
var stylecow = require('../lib');
var fs = require('fs');


program
	.command('convert <input> [<output>]')
	.description('Convert the css code of a file')
	.option('-e, --explorer <version>', 'Min version supported in Internet Explorer instead the default', optionBrowser)
	.option('-f, --firefox <version>', 'Min version supported in Mozilla Firefox instead the default', optionBrowser)
	.option('-c, --chrome <version>', 'Min version supported in Google Chrome instead the default', optionBrowser)
	.option('-s, --safari <version>', 'Min version supported in Safari instead the default', optionBrowser)
	.option('-o, --opera <version>', 'Min version supported in Opera instead the default', optionBrowser)
	.option('-a, --android <version>', 'Min version supported in Android instead the default', optionBrowser)
	.option('-i, --ios <version>', 'Min version supported in Safari iOS instead the default', optionBrowser)
	.option('--code <style>', 'The code style used to generate the css (default|minify) instead the default')
	.option('--plugins <plugins>', 'Comma-separated list of plugins instead use the defaults', optionPlugins)
	.option('--plugins:add <plugins>', 'Comma-separated list of plugins used besides to the defaults', optionPlugins)
	.option('--plugins:remove <plugins>', 'Comma-separated list of default plugins that wont be used', optionPlugins)
	.action(convert);


program
	.command('plugin')
	.description('Manage the installed plugins')
	.option('-l, --list', 'List all installed plugins')
	.option('-i, --install <plugin>', 'Installs a new plugin', optionPlugins)
	.option('-u, --uninstall <plugin>', 'Uninstalls a plugin', optionPlugins)
	.action(plugin);


program
	.command('config')
	.description('Manages the configurations values')
	.option('-l, --list', 'List all configuration values')
	.option('-i, --input <file>', 'Load the configuration from a file instead use the default')
	.option('-o, --output <file>', 'Saves the configuration in a file instead as default')
	.option('--explorer <version>', 'Changes the min version supported in Internet Explorer', optionBrowser)
	.option('--firefox <version>', 'Changes the min version supported in Mozilla Firefox', optionBrowser)
	.option('--chrome <version>', 'Changes the min version supported in Google Chrome', optionBrowser)
	.option('--safari <version>', 'Changes the min version supported in Safari', optionBrowser)
	.option('--opera <version>', 'Changes the min version supported in Opera', optionBrowser)
	.option('--android <version>', 'Changes the min version supported in Android', optionBrowser)
	.option('--ios <version>', 'Changes the min version supported in Safari iOS', optionBrowser)
	.option('--code <style>', 'Changes the code style used to generate the css (default|minify)', optionPlugins)
	.option('--plugins <plugins>', 'Changed the list of plugins used by default', optionPlugins)
	.option('--plugins:add <plugins>', 'Adds more plugins to be executed by default', optionPlugins)
	.option('--plugins:remove <plugins>', 'Removes plugins from the defaults', optionPlugins)
	.action(config);

program.parse(process.argv);


//CONVERT
function convert (input_output, command) {
	input_output = input_output.split(':');

	var code = stylecow.readFile(input_output[0]);
	var codeStyle = getConfig('code');
	var minSupport = getConfig('support');
	var plugins = getConfig('plugins');

	stylecow.loadPlugins(plugins, function (loadedPlugins) {
		execute(code, loadedPlugins, minSupport, codeStyle, input_output[1]);
	});
}

function execute (code, plugins, minSupport, codeStyle, output) {
	code.executePlugins(plugins, minSupport);

	if (output) {
		fs.writeFileSync(output, code.toCode(codeStyle));
		console.log('CSS saved in "' + output + '"');
	} else {
		console.log(code.toCode(codeStyle));
	}
}


//CONFIG

function config (command) {
	var config;

	if (command.input) {
		config = JSON.parse(fs.readFileSync(command.input, 'utf8'));
	} else {
		config = getConfig();
	}

	if (command.list) {
		console.log('');
		console.log('BROWSER SUPPORT:');

		for (var browser in config.support) {
			console.log(browser + ':', config.support[browser]);
		}

		console.log('');
		console.log('PLUGINS:');

		if (!config.plugins.length) {
			console.log('No default plugins');
		} else {
			config.plugins.forEach(function (plugin) {
				console.log('- ' + plugin);
			});
		}

		console.log('');
		console.log('CODE:');

		for (var k in config.code) {
			console.log(k + ':', '"' + config.code[k].replace('\n', '\\n').replace('\t', '\\t') + '"');
		}

		return;
	}

	modifyConfig(config, command, function (config) {
		if (command.output) {
			fs.writeFileSync(command.output, JSON.stringify(config, null, '\t'));
		} else {
			saveConfig(config);
		}
	});
}



//PLUGIN

function plugin (command) {
	if (command.list) {
		getInstalledPlugins(function (plugins) {
			plugins.forEach(function (plugin) {
				console.log('- ' + plugin);
			});
		});

		return;
	}

	if (command.install) {
		loadNpm(function (npm) {
			var packages = [];

			command.install.forEach(function (plugin) {
				packages.push(stylecow.getPluginPackage(plugin));

			});

			npm.commands.install(packages, function (err, data) {
				if (!err) {
					console.log('');
					console.log('Plugins installed successfully!!');
					console.log('');
				}
			});
		});
	}

	if (command.uninstall) {
		loadNpm(function (npm) {
			var packages = [];

			command.uninstall.forEach(function (plugin) {
				packages.push(stylecow.getPluginPackage(plugin));

			});

			npm.commands.uninstall(packages, function (err, data) {
				if (!err) {
					console.log('');
					console.log('Plugins uninstalled successfully!!');
					console.log('');
				}
			});
		});
	}
}




// Misc

function modifyConfig (config, command, callback) {
	if (command.code) {
		config.code = stylecow.getCodeStyle(command.code);

		if (!config.code) {
			console.error('The code style ' + command.code + ' is not valid');
		}
	}

	['explorer','firefox','chrome','safari','opera','android','ios'].forEach(function (browser) {
		if (command[browser]) {
			config.support[browser] = command[browser];
		}
	});

	if (command.plugins) {
		config.plugins = command.plugins;
	}

	if (command['plugins:remove']) {
		command['plugins:remove'].forEach(function (plugin) {
			var index = plugins.indexOf(plugin);

			if (index !== -1) {
				config.plugins.splice(index, 1);
			}
		});
	}

	if (command['plugins:add']) {
		getInstalledPlugins(function (installed) {
			command['plugins:add'].forEach(function (plugin) {
				if (installed.indexOf(plugin) === -1) {
					console.error("The plugin '" + plugin + "' is not installed. Use `stylecow plugin install " + plugin + "` to install");
				} else if (config.plugins.indexOf(plugin) === -1) {
					config.plugins.push(plugin);
				}
			});

			callback(config);
		});
	} else {
		callback(config);
	}
}

function optionBrowser (value) {
	if (value === 'false') {
		return false;
	}

	return parseFloat(value, 10);
}

function optionPlugins (value) {
	return value.split(',');
}

function loadNpm (callback) {
	var npm = require('npm');

	npm.load(function (err) {
		if (err) {
			console.error(err);
			return;
		}

		callback(npm);
	});
}

function getInstalledPlugins (callback) {
	loadNpm(function (npm) {
		var plugins = fs.readdirSync(npm.root).filter(function (value) {
			return value.slice(0, 16) === 'stylecow-plugin-';
		}).map(function (value) {
			return value.slice(16);
		});

		callback(plugins);
	});
}

function getConfig () {
	file = __dirname + '/../config/default.json';

	if (!fs.existsSync(file)) {
		return def;
	}

	return JSON.parse(fs.readFileSync(file, 'utf8'));
}

function saveConfig (value) {
	file = __dirname + '/../config/default.json';

	fs.writeFileSync(file, JSON.stringify(value, null, '\t'));
}
