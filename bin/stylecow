#!/usr/bin/env node

var program = require('commander');
var inquirer = require('inquirer');
var clc = require('cli-color');
var stylecow = require('../lib');
var fs = require('fs');
var path = require('path');
var glob = require('glob');

var header = clc.cyan.bold;
var value = clc.yellow;
var error = clc.red.bold;
var success = clc.green.bold;

var configFile = process.env.USERPROFILE + '/.stylecow_config.json';
var packageInfo = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8'));

program.version(packageInfo.version);


program
	.command('convert <input> [<output>]')
	.description('Convert the css code from a file or directory')
	.option('-m, --manifest <file>', 'Use a specific manifest file instead the default')
	.option('-w, --watch', 'Watches the changes in the css files')
	.action(convert);


program
	.command('plugins')
	.description('Manage the installed plugins')
	.option('-l, --list', 'List all installed plugins')
	.option('-i, --install <plugin>', 'Installs new plugins', function (value) { return value.split(','); })
	.option('-u, --uninstall <plugin>', 'Uninstalls plugins', function (value) { return value.split(','); })
	.option('-p, --update', 'Update all installed plugins to the latest version')
	.option('-a, --all', 'List all plugins')
	.action(plugins);


program
	.command('manifest')
	.description('Create manifest files with specific configuration to reuse')
	.option('-d, --default', 'Show the default manifest file')
	.option('-e, --edit-default', 'Edit the default manifest file')
	.option('-c, --create <file>', 'Create a new manifest file')
	.action(manifest);


//CONVERT
function convert (input, output, command) {
	var config = getConfig(command.manifest);

	preparePlugins(config.plugins, function (loadedPlugins) {
		if (!fs.existsSync(input)) {
			console.log(error('The path "' + input + '" does not exists'));
			return;
		}

		if (fs.lstatSync(input).isFile()) {
			return execute(input, output, loadedPlugins, config.support, config.code, command.watch);
		}

		if (fs.lstatSync(input).isDirectory()) {
			return glob('**/*.css', {
					cwd: path.resolve(input)
				}, function (er, files) {
					files.forEach(function (file) {
						var finput = path.join(input, file);
						var foutput = output ? path.join(output, file) : null;

						execute(finput, foutput, loadedPlugins, config.support, config.code, command.watch);
					});
			});
		}
	});
}


function execute (input, output, plugins, minSupport, codeStyle, watch) {
	var code = stylecow.readFile(input);
	code.executePlugins(plugins, minSupport);

	if (output) {
		var dir = path.dirname(output);

		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir);
		}

		fs.writeFileSync(output, code.toCode(codeStyle));
		console.log(success('Generated "' + output + '"'));
	} else {
		console.log(code.toCode(codeStyle));
	}

	if (watch) {
		console.log(value('Waiting for changes'));
		
		var files = {};

		code
			.search()
			.filter(function (child) {
				return (child._data && child._data['sourceFile']);
			})
			.map(function (child) {
				return child._data['sourceFile'];
			})
			.forEach(function (file) {
				files[file] = null;
			});
		
		for (var file in files) {
			fs.watchFile(file, {persistent: true, interval: 2000}, function (curr, prev) {
				if (curr.mtime !== prev.mtime) {
					console.log(value('changed detected in "' + file + '"'));
					
					for (var f in files) {
						fs.unwatchFile(f);
					}

					execute(input, output, plugins, minSupport, codeStyle, watch);
				}
			});
		}
	}
}


function plugins (command) {
	showHelpOnEmpty('plugins', command);

	if (command.list) {
		var plugins = stylecow.getInstalledPlugins();

		if (plugins.length) {
			stylecow.getInstalledPlugins().forEach(function (plugin) {
				console.log('- ' + value(plugin));
			});
		} else {
			console.log('No installed plugins');
		}

		return;
	}

	if (command.install) {
		stylecow.managePlugins('install', command.install, function () {
			console.log('');
			console.log(success('Plugins installed successfully!!'));
			console.log('');
		});
	}

	if (command.uninstall) {
		stylecow.managePlugins('uninstall', command.uninstall, function () {
			console.log('');
			console.log(success('Plugins uninstalled successfully!!'));
			console.log('');
		});
	}

	if (command.update) {
		stylecow.managePlugins('update', stylecow.getInstalledPlugins(), function () {
			console.log('');
			console.log(success('Plugins updated successfully!!'));
			console.log('');
		});
	}

	if (command.all) {
		allPlugins(function (data) {
			for (i in data) {
				plugin = data[i];
				console.log(value(stylecow.getPluginName(plugin.name)));
				console.log(plugin.description);
				console.log('')
			}
		});
	}
}


function manifest (command) {
	showHelpOnEmpty('manifest', command);

	if (command['default']) {
		showConfig(getConfig());

		return;
	}

	if (command.editDefault) {
		modifyManifest(getConfig(), function (config) {
			saveConfig(config);

			console.log(success('Default manifest saved in ' + configFile));
		});

		return;
	}

	if (command.create) {
		modifyManifest(getConfig(), function (config) {
			saveConfig(config, command.create);

			console.log(success('Manifest file created!'));
		});

		return;
	}
}


// Misc

function showHelpOnEmpty (name, command) {
	var l = program.rawArgs.length - 1;

	if (program.rawArgs[l] === name) {
		command.help();
	}
}

function showConfig (config) {
	console.log('');
	console.log(header('BROWSER SUPPORT:'));

	for (var browser in config.support) {
		console.log(browser + ':', value(config.support[browser]));
	}

	console.log('');
	console.log(header('PLUGINS:'));

	if (config.plugins.length) {
		config.plugins.forEach(function (plugin) {
			console.log('- ' + value(plugin));
		});
	} else {
		console.log('No plugins applied by default');
	}

	console.log('');
	console.log(header('CODE:'));

	for (var k in config.code) {
		console.log(k + ':', value('"' + config.code[k].replace('\n', '\\n').replace('\t', '\\t') + '"'));
	}
}

function preparePlugins (plugins, callback) {
	var installed = stylecow.getInstalledPlugins();
	var notInstalled = plugins.filter(function (plugin) {
		return installed.indexOf(plugin) === -1;
	});

	if (notInstalled.length) {
		inquirer.prompt([
			{
				type: "confirm",
				name: "install",
				message: "The following plugins will be installed. Continue? \n" + value(notInstalled.join(', '))
			}
		], function (answers) {
			if (answers.install) {
				stylecow.managePlugins('install', notInstalled, function () {
					console.log(success('Plugins installed!'));

					stylecow.loadPlugins(plugins, function (loadedPlugins) {
						callback(loadedPlugins);
					});
				});
			}
		});
	} else {
		stylecow.loadPlugins(plugins, function (loadedPlugins) {
			callback(loadedPlugins);
		});
	}
}


function modifyManifest (config, callback) {
	allPlugins(function (allPlugins) {

		var questions = [
			{
				type: "input",
				name: "explorer",
				message: "Min version supported in Internet Explorer",
				default: config.support.explorer
			},
			{
				type: "input",
				name: "firefox",
				message: "Min version supported in Mozilla Firefox",
				default: config.support.firefox
			},
			{
				type: "input",
				name: "chrome",
				message: "Min version supported in Google Chrome",
				default: config.support.chrome
			},
			{
				type: "input",
				name: "safari",
				message: "Min version supported in Safari",
				default: config.support.safari
			},
			{
				type: "input",
				name: "opera",
				message: "Min version supported in Opera",
				default: config.support.opera
			},
			{
				type: "input",
				name: "android",
				message: "Min version supported in Android",
				default: config.support.android
			},
			{
				type: "input",
				name: "ios",
				message: "Min version supported in Safari for iOS",
				default: config.support.ios
			},
			{
				type: "list",
				name: "code",
				message: "Code style used to generate the css",
				choices: ['default', 'normal', 'minify'],
				default: 'default'
			},
			{
				type: "checkbox",
				name: "plugins",
				message: "Plugins used to transform de css",
				choices: allPlugins.map(function (plugin) {
					return {
						key: plugin.name,
						name: plugin.name,
						value: plugin.name,
						checked: (config.plugins.indexOf(plugin.name) !== -1)
					};
				})
			}
		];

		inquirer.prompt(questions, function (answers) {
			var manifest = {};

			if (answers.input) {
				manifest.input = answers.input;
			}

			if (answers.output) {
				manifest.output = answers.output;
			}

			manifest.support = {};

			['explorer','firefox','chrome','safari','opera','android','ios'].forEach(function (browser) {
				manifest.support[browser] = (answers[browser] === 'false') ? false : parseFloat(answers[browser], 10);
			});

			if (answers.code === 'default') {
				manifest.code = config.code;
			} else {
				manifest.code = stylecow.getCodeStyle(answers.code);
			}

			manifest.plugins = answers.plugins;

			console.log(JSON.stringify(manifest, null, '\t'));

			inquirer.prompt([
				{
					type: "confirm",
					name: "ok",
					message: "Looks fine?"
				}
			], function (answers) {
				if (answers.ok) {
					callback(manifest);
				}
			});

		});

	});
}


function allPlugins (callback) {
	var cache = path.dirname(__dirname) + '/all-plugins.json';

	if (fs.existsSync(cache)) {
		var stat = fs.lstatSync(cache);
		var diff = (new Date()).getTime() - stat.mtime.getTime();

		if (diff < 3600000) { //1 hour
			return callback(JSON.parse(fs.readFileSync(cache, 'utf8')));
		}
	}

	stylecow.getAllPlugins(function (all) {
		fs.writeFileSync(cache, JSON.stringify(all, null, '\t'));
		callback(all);
	});
}

function getConfig (file) {
	var f = file || configFile;

	if (fs.existsSync(f)) {
		return JSON.parse(fs.readFileSync(f, 'utf8'));
	}

	if (!file) {
		return stylecow.getDefaults();
	}
}

function saveConfig (value, file) {
	fs.writeFileSync(file || configFile, JSON.stringify(value, null, '\t'));
}

program.parse(process.argv);

if (program.args.length === 0) {
	program.help();
}
