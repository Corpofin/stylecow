#!/usr/bin/env node

var program = require('commander');
var stylecow = require('../lib');
var fs = require('fs');


program
	.command('convert <input:output>')
	.description('Convert the css code of a file')
	.option('-l, --list', 'List all installed plugins')
	.option('-i, --install <plugin>', 'Installs a new plugin')
	.option('-u, --uninstall <plugin>', 'Uninstalls a plugin')
	.action(convert);


program
	.command('plugin')
	.description('Manage the installed plugins')
	.option('-l, --list', 'List all installed plugins', plugin_list)
	.option('-i, --install <plugin>', 'Installs a new plugin', plugin_install)
	.option('-u, --uninstall <plugin>', 'Uninstalls a plugin', plugin_uninstall)
	.action(function () {});


program
	.command('default:plugins')
	.description('Configure the plugins executed by default')
	.option('-l, --list', 'List all default plugins', default_plugins_list)
	.option('-s, --set <plugin>', 'Set a installed plugin as default', default_plugins_set)
	.option('-u, --unset <plugin>', 'Unset a plugin from defaults', default_plugins_unset)
	.action(function () {});


program
	.command('default:support')
	.description('Configure the minimum version support for each browser')
	.option('-l, --list', 'List the current browser support', default_support_list)
	.option('-e, --explorer <version>', 'Changes the minimum version supported in Internet Explorer', function (version) { default_support_set('explorer', version); })
	.option('-f, --firefox <version>', 'Changes the minimum version supported in Mozilla Firefox', function (version) { default_support_set('firefox', version); })
	.option('-c, --chrome <version>', 'Changes the minimum version supported in Google Chrome', function (version) { default_support_set('chrome', version); })
	.option('-s, --safari <version>', 'Changes the minimum version supported in Safari', function (version) { default_support_set('safari', version); })
	.option('-o, --opera <version>', 'Changes the minimum version supported in Opera', function (version) { default_support_set('opera', version); })
	.option('-a, --android <version>', 'Changes the minimum version supported in Android', function (version) { default_support_set('android', version); })
	.option('-i, --ios <version>', 'Changes the minimum version supported in Safari iOS', function (version) { default_support_set('ios', version); })
	.action(function () {});


program
	.command('default:code')
	.description('Configure the code style used to generate the css')
	.option('-l, --list', 'List the current code style variables', default_code_list)
	.option('-s --set <style>', 'Changes the code style used to generate the css (default|minify)', default_code_set)
	.action(function () {});


program.parse(process.argv);


//CONVERT
function convert (input_output, command) {
	input_output = input_output.split(':');

	var code = stylecow.readFile(input_output[0]);
	var codeStyle = getConfig('code');
	var minSupport = getConfig('support');
	var plugins = getConfig('plugins');

	stylecow.loadPlugins(plugins, function (loadedPlugins) {
		execute(code, loadedPlugins, minSupport, codeStyle, input_output[1]);
	});
}

function execute (code, plugins, minSupport, codeStyle, output) {
	code.executePlugins(plugins, minSupport);

	if (output) {
		fs.writeFileSync(output, code.toCode(codeStyle));
		console.log('CSS saved in "' + output + '"');
	} else {
		console.log(code.toCode(codeStyle));
	}
}



//PLUGIN
function plugin_list () {
	getInstalledPlugins(function (plugins) {
		plugins.forEach(function (plugin) {
			console.log('- ' + plugin);
		});
	});
}

function plugin_install (plugin) {
	loadNpm(function (npm) {
		var packageName = stylecow.getPluginPackage(plugin);

		npm.commands.install([packageName], function (err, data) {
			if (err) {
				console.error('Error installing the plugin "' + plugin + '"');
			} else {
				console.log('The plugin "' + plugin + '" was installed');
			}
		});
	});
}

function plugin_uninstall (plugin) {
	loadNpm(function (npm) {
		var packageName = stylecow.getPluginPackage(plugin);

		npm.commands.uninstall([packageName], function (err, data) {
			if (err) {
				console.error('Error uninstalling the plugin "' + plugin + '"');
			} else {
				console.log('The plugin "' + plugin + '" was uninstalled');
			}
		});
	});
}


// DEFAULT:PLUGINS
function default_plugins_list () {
	var plugins = getConfig('plugins', []);

	if (!plugins.length) {
		console.log('No default plugins');
	} else {
		plugins.forEach(function (plugin) {
			console.log('- ' + plugin);
		});
	}
}

function default_plugins_set (plugins) {
	getInstalledPlugins(function (installed) {
		var defaults = getConfig('plugins', []);
		var error = false;

		plugins.split(',').forEach(function (plugin) {
			if (installed.indexOf(plugin) === -1) {
				console.log("The plugin '" + plugin + "' is not installed. Use `stylecow plugin install " + plugin + "` to install");
				error = true;
			} else if (defaults.indexOf(plugin) === -1) {
				defaults.push(plugin);
			}
		});

		if (error) {
			return false;
		}

		saveConfig('plugins', defaults);

		console.log("Default plugins updated:");

		default_plugins_list();
	});
}

function default_plugins_unset (plugins) {
	var defaults = getConfig('plugins', []);

	plugins.split(',').forEach(function (plugin) {
		var index = defaults.indexOf(plugin);

		if (index === -1) {
			console.error("The plugin '" + plugin + "' is not default");
		} else {
			defaults.splice(index, 1);
		}
	});

	saveConfig('plugins', defaults);

	console.log("Default plugins updated:");

	default_plugins_list();
}


// DEFAULT:SUPPORT
function default_support_list () {
	var support = getConfig('support');

	for (var browser in support) {
		console.log(browser + ':', support[browser]);
	}
}

function default_support_set (name, version) {
	var support = getConfig('support');

	support[name] = version;

	saveConfig('support', support);

	console.log('The minimal version supported in ' + name + ' is ' + version);
}



// DEFAULT:CODE
function default_code_list () {
	var code = getConfig('code');

	for (var k in code) {
		console.log(k + ':', '"' + code[k].replace('\n', '\\n').replace('\t', '\\t') + '"');
	}
}

function default_code_set (name) {
	var code = stylecow.getCodeStyle(name);

	if (!code) {
		console.error('The code style ' + name + ' is not valid');
	} else {
		saveConfig('code', code);
		console.log('The new code style is "' + name + '"');
		console.log('');
		default_code_list();
	}

}




//Functions

function loadNpm (callback) {
	var npm = require('npm');

	npm.load(function (err) {
		if (err) {
			console.error(err);
			return;
		}

		callback(npm);
	});
}

function getInstalledPlugins (callback) {
	loadNpm(function (npm) {
		var plugins = fs.readdirSync(npm.root).filter(function (value) {
			return value.slice(0, 16) === 'stylecow-plugin-';
		}).map(function (value) {
			return value.slice(16);
		});

		callback(plugins);
	});
}

function getConfig (file, def) {
	file = __dirname + '/../config/' + file + '.json';

	if (!fs.existsSync(file)) {
		return def;
	}

	return JSON.parse(fs.readFileSync(file, 'utf8'));
}

function saveConfig (file, value) {
	file = __dirname + '/../config/' + file + '.json';

	fs.writeFileSync(file, JSON.stringify(value));
}
